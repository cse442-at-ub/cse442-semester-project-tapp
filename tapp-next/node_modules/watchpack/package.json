{
  "_args": [
    [
      "watchpack@2.0.0-beta.5",
      "/home/anrao3/cse442-semester-project-tapp/tapp-next/node_modules/next"
    ]
  ],
  "_from": "watchpack@2.0.0-beta.5",
  "_hasShrinkwrap": false,
  "_id": "watchpack@2.0.0-beta.5",
  "_inCache": true,
  "_installable": true,
  "_location": "/watchpack",
  "_nodeVersion": "12.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/watchpack_2.0.0-beta.5_1561963600047_0.5974950465446014"
  },
  "_npmUser": {
    "email": "tobias.koppers@googlemail.com",
    "name": "sokra"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "name": "watchpack",
    "raw": "watchpack@2.0.0-beta.5",
    "rawSpec": "2.0.0-beta.5",
    "scope": null,
    "spec": "2.0.0-beta.5",
    "type": "version"
  },
  "_requiredBy": [
    "/next"
  ],
  "_resolved": "https://registry.npmjs.org/watchpack/-/watchpack-2.0.0-beta.5.tgz",
  "_shasum": "c005db39570d81d9d34334870abc0f548901b880",
  "_shrinkwrap": null,
  "_spec": "watchpack@2.0.0-beta.5",
  "_where": "/home/anrao3/cse442-semester-project-tapp/tapp-next/node_modules/next",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack/watchpack/issues"
  },
  "dependencies": {
    "glob-to-regexp": "^0.4.1",
    "graceful-fs": "^4.1.2",
    "neo-async": "^2.5.0"
  },
  "description": "Wrapper library for directory and file watching.",
  "devDependencies": {
    "coveralls": "^3.0.0",
    "eslint": "^5.11.1",
    "eslint-config-prettier": "^4.3.0",
    "eslint-plugin-prettier": "^3.1.0",
    "istanbul": "^0.4.3",
    "mocha": "^5.0.1",
    "prettier": "^1.11.0",
    "rimraf": "^2.6.2",
    "should": "^8.3.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "fileCount": 6,
    "integrity": "sha512-HGqh9e9QZFhow8JYX+1+E+kIYK0uTTsk6rCOkI0ff0f9kMO0wX783yW8saQC9WDx7qHpVGPXsRnld9nY7iwzQA==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdGaxQCRA9TVsSAnZWagAA8UoQAI7xJtPkIiU33TVy/lAF\nJ2KD0oxDlUsHCKMOeFBz5vEr64y4CL1YKyE6lc4yGl0y36Lj5LrWhFY4vnDW\nwD4t1k8aPQOmUUAdvV+R7Mac4ZHBuCN1PoIKHbNHWBce1n/iLED6AzCi61BN\nX7vO+ZZrFBDQXbwDwEbbc3CCDu19NzOiLmimawrxcNYE29RaCgqz9vaB7GLn\n/LOubrIFN3+zEMu0SLuT3XwPlvDiCTV5OCwXciAEvoaSFIIeIollU++x5m1J\nIQDd/8/cVgyxK6uv3ePzXImtGZmQYsLgGyoEp+X+VXKwvaJ2zzQ5Hy1gLZmr\ndDv4wIlHQiep220poBqtRuWm8NRLl0M8nAnbB5gdUUVVChfblmSBc3Nx/Z3E\niyayKYk6+Xo9RcwGFMbAgibis6DDy9mxLZvUXJxrRmlQ8RwAJpHoZPZsJouB\nit59BcgSHEmRHUA7nfhYE/EF/A+Ie9ZzGDKt2PYgjElREJumadZ9Uzs/ldli\nmukTqKBKj6NHOQl6HbjURPtH0/PSjSTY+t0emCDJFReP+KKcF39KqyaQpGFO\nQ+ItiCU9fIGVeUEquPPjC0tBOphMGcsQzK4EoMxNyMYl0l1XtQSKqQdKiBne\nyHLSSDiUIDQvT2VSL3uTTH+xIb7wWYZ6TtlVQTl7BEXkPKSlim5Twf1ppZtO\nSvEO\r\n=XSg/\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "c005db39570d81d9d34334870abc0f548901b880",
    "tarball": "https://registry.npmjs.org/watchpack/-/watchpack-2.0.0-beta.5.tgz",
    "unpackedSize": 29747
  },
  "engines": {
    "node": ">=6.11.5"
  },
  "gitHead": "cffd574e0b0c9f133dc5c850651434b835617a6d",
  "homepage": "https://github.com/webpack/watchpack",
  "license": "MIT",
  "main": "./lib/watchpack.js",
  "maintainers": [
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    }
  ],
  "name": "watchpack",
  "optionalDependencies": {},
  "readme": "# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status][build-status]][build-status-url]\n[![Build status][build-status-veyor]][build-status-veyor-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![codecov][codecov]][codecov-url]\n[![downloads][downloads]][downloads-url]\n[![Github contributors][contributors]][contributors-url]\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n- The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n- A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n- Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n- The real watchers are created by the `DirectoryWatcher`.\n- Files are never watched directly. This should keep the watcher count low.\n- Watching can be started in the past. This way watching can start after file reading.\n- Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n```javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n\n\tignored: \"**/.git\",\n\t// ignored: \"string\" - a glob pattern for files or folders that should not be watched\n\t// ignored: [\"string\", \"string\"] - multiple glob patterns that should be ignored\n\t// All subdirectories are ignored too\n});\n\n// Watchpack.prototype.watch(files: string[], directories: string[], startTime?: number)\nwp.watch(listOfFiles, listOfDirectories, Date.now() - 10000);\n// starts watching these files and directories\n// calling this again will override the files and directories\n\nwp.on(\"change\", function(filePath, mtime) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file (null if file was removed)\n\t// for folders it's a time before that all changes in the directory happened\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: the time before that all changes happened\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[build-status]: https://travis-ci.org/webpack/watchpack.svg?branch=master\n[build-status-url]: https://travis-ci.org/webpack/watchpack\n[build-status-veyor]: https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true\n[build-status-veyor-url]: https://ci.appveyor.com/project/sokra/watchpack/branch/master\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n[codecov]: https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/webpack/watchpack\n[downloads]: https://img.shields.io/npm/dm/watchpack.svg\n[downloads-url]: https://www.npmjs.com/package/watchpack\n[contributors]: https://img.shields.io/github/contributors/webpack/watchpack.svg\n[contributors-url]: https://github.com/webpack/watchpack/graphs/contributors\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack/watchpack.git"
  },
  "scripts": {
    "cover": "istanbul cover node_modules/mocha/bin/_mocha",
    "lint": "eslint lib",
    "precover": "yarn lint",
    "pretest": "yarn lint",
    "pretty-files": "prettier \"lib/**.*\" \"test/**/*.js\" --write",
    "test": "mocha"
  },
  "version": "2.0.0-beta.5"
}
